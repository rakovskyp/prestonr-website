{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/books/stumbling.js"],"names":["StyledLink","styled","props","Layout","children","className","style","margin","maxWidth","padding","Stumbling","title","to"],"mappings":"0ZAgBA,IAAMA,EAAaC,aAAO,SAAAC,GAAK,OAAI,kBAAC,OAASA,KAA1BD,CAAH,KA8CDE,IAxCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACN,OAUV,OACE,oCACE,6BACE,kBAACJ,EAAD,KAAY,wBAAIK,UAAU,iBAAd,aAGd,yBAAKA,UAAU,eACX,kBAAC,IAAD,OAEJ,yBACEC,MAAO,CACLC,OAAO,SACPC,SAAU,IACVC,QAAQ,wBAGV,8BAAOL,GACP,yC,gkBC5CR,IAAMJ,EAAaC,aAAO,SAAAC,GAAK,OAAI,kBAAC,OAASA,KAA1BD,CAAH,KAgDDS,UAnCG,SAAAR,GAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKS,MAAM,2BACX,yBAAKN,UAAU,WACb,wBAAIA,UAAU,gBAAd,0BACA,kBAACL,EAAD,CAAYY,GAAG,UACb,qCAGF,0CACA,uGAEA,uBAAGP,UAAU,UAAb,0KAMA,uBAAGA,UAAU,UAAb,kIAEmD,sCAFnD,8BAKA,uBAAGA,UAAU,UAAb,kRAIA","file":"component---src-pages-books-stumbling-js-a781cf557e34c2bdbd8c.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\n\nimport styled from \"styled-components\";\nimport Nav from './nav'\nimport \"./layout.css\"\n\nconst StyledLink = styled(props => <Link {...props} />)`\n    text-decoration: none;\n    text-decoration-color: initial;\n    text-decoration-style: initial;\n`;\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div>\n        <StyledLink><h1 className=\"headerPreston\">preston</h1></StyledLink>\n      </div>\n\n      <div className=\"headerOther\">\n          <Nav />\n      </div>\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          {` `}\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport Layout from \"../../components/layout\"\nimport styled from \"styled-components\"\nimport SEO from \"../../components/seo\"\nimport { Link } from \"gatsby\"\n\nconst StyledLink = styled(props => <Link {...props} />)`\n  font-size: 16px;\n  padding: 0 15px;\n  float: right;\n  text-align: right;\n  position: relative;\n  text-decoration: none;\n  text-decoration-color: initial;\n  text-decoration-style: initial;\n  color: black;\n  font-family: georgia, serif;\n`\n\nconst Stumbling = props => {\n  return (\n    <Layout>\n      <SEO title=\"Stumbling on Happiness\" />\n      <div className=\"fade-in\">\n        <h1 className=\"title shrink\">stumbling on happiness</h1>\n        <StyledLink to=\"/books\">\n          <h4>back</h4>\n        </StyledLink>\n        \n        <h3>the future</h3>\n        <h4>We are incredibly bad at imagining how we will feel in future scenarios</h4>\n\n        <p className=\"indent\">\n          For example, it's easy to imagine that I would be pretty happy if I were Mark Zuckerbug. I would have \n          more money, power, and status than I would know what \n          to do with.\n        </p>\n\n        <p className=\"indent\">\n          When imagine ourselves in a future scenario that we think will make us happy, \n          we tend to fill in and leave out details that we <em>assume</em> will work themselves out.\n        </p>\n\n        <p className=\"indent\">\n          When I wrote that sentence above, I immediately assumed that I would have a completely happy marriage, happy family, despite the fact that his work life balance is probably borderline non-existent because you can't have all of that and have free time, let alone hobbies.\n        </p>\n\n        <p></p>\n\n      </div>\n    </Layout>\n  )\n}\n\nexport default Stumbling\n"],"sourceRoot":""}